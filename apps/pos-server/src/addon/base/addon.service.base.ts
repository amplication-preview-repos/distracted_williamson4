/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Addon as PrismaAddon } from "@prisma/client";

export class AddonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AddonCountArgs, "select">): Promise<number> {
    return this.prisma.addon.count(args);
  }

  async addons<T extends Prisma.AddonFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddonFindManyArgs>
  ): Promise<PrismaAddon[]> {
    return this.prisma.addon.findMany<Prisma.AddonFindManyArgs>(args);
  }
  async addon<T extends Prisma.AddonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddonFindUniqueArgs>
  ): Promise<PrismaAddon | null> {
    return this.prisma.addon.findUnique(args);
  }
  async createAddon<T extends Prisma.AddonCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddonCreateArgs>
  ): Promise<PrismaAddon> {
    return this.prisma.addon.create<T>(args);
  }
  async updateAddon<T extends Prisma.AddonUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddonUpdateArgs>
  ): Promise<PrismaAddon> {
    return this.prisma.addon.update<T>(args);
  }
  async deleteAddon<T extends Prisma.AddonDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddonDeleteArgs>
  ): Promise<PrismaAddon> {
    return this.prisma.addon.delete(args);
  }
}
