/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Therapist as PrismaTherapist } from "@prisma/client";

export class TherapistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TherapistCountArgs, "select">
  ): Promise<number> {
    return this.prisma.therapist.count(args);
  }

  async therapists<T extends Prisma.TherapistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TherapistFindManyArgs>
  ): Promise<PrismaTherapist[]> {
    return this.prisma.therapist.findMany<Prisma.TherapistFindManyArgs>(args);
  }
  async therapist<T extends Prisma.TherapistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TherapistFindUniqueArgs>
  ): Promise<PrismaTherapist | null> {
    return this.prisma.therapist.findUnique(args);
  }
  async createTherapist<T extends Prisma.TherapistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TherapistCreateArgs>
  ): Promise<PrismaTherapist> {
    return this.prisma.therapist.create<T>(args);
  }
  async updateTherapist<T extends Prisma.TherapistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TherapistUpdateArgs>
  ): Promise<PrismaTherapist> {
    return this.prisma.therapist.update<T>(args);
  }
  async deleteTherapist<T extends Prisma.TherapistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TherapistDeleteArgs>
  ): Promise<PrismaTherapist> {
    return this.prisma.therapist.delete(args);
  }
}
