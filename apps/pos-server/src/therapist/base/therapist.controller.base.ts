/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TherapistService } from "../therapist.service";
import { TherapistCreateInput } from "./TherapistCreateInput";
import { Therapist } from "./Therapist";
import { TherapistFindManyArgs } from "./TherapistFindManyArgs";
import { TherapistWhereUniqueInput } from "./TherapistWhereUniqueInput";
import { TherapistUpdateInput } from "./TherapistUpdateInput";

export class TherapistControllerBase {
  constructor(protected readonly service: TherapistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Therapist })
  async createTherapist(
    @common.Body() data: TherapistCreateInput
  ): Promise<Therapist> {
    return await this.service.createTherapist({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Therapist] })
  @ApiNestedQuery(TherapistFindManyArgs)
  async therapists(@common.Req() request: Request): Promise<Therapist[]> {
    const args = plainToClass(TherapistFindManyArgs, request.query);
    return this.service.therapists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Therapist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async therapist(
    @common.Param() params: TherapistWhereUniqueInput
  ): Promise<Therapist | null> {
    const result = await this.service.therapist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Therapist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTherapist(
    @common.Param() params: TherapistWhereUniqueInput,
    @common.Body() data: TherapistUpdateInput
  ): Promise<Therapist | null> {
    try {
      return await this.service.updateTherapist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Therapist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTherapist(
    @common.Param() params: TherapistWhereUniqueInput
  ): Promise<Therapist | null> {
    try {
      return await this.service.deleteTherapist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
