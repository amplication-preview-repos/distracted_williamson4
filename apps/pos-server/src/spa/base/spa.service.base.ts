/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Spa as PrismaSpa } from "@prisma/client";

export class SpaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SpaCountArgs, "select">): Promise<number> {
    return this.prisma.spa.count(args);
  }

  async spas<T extends Prisma.SpaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpaFindManyArgs>
  ): Promise<PrismaSpa[]> {
    return this.prisma.spa.findMany<Prisma.SpaFindManyArgs>(args);
  }
  async spa<T extends Prisma.SpaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpaFindUniqueArgs>
  ): Promise<PrismaSpa | null> {
    return this.prisma.spa.findUnique(args);
  }
  async createSpa<T extends Prisma.SpaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpaCreateArgs>
  ): Promise<PrismaSpa> {
    return this.prisma.spa.create<T>(args);
  }
  async updateSpa<T extends Prisma.SpaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpaUpdateArgs>
  ): Promise<PrismaSpa> {
    return this.prisma.spa.update<T>(args);
  }
  async deleteSpa<T extends Prisma.SpaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpaDeleteArgs>
  ): Promise<PrismaSpa> {
    return this.prisma.spa.delete(args);
  }
}
