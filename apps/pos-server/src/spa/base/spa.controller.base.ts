/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpaService } from "../spa.service";
import { SpaCreateInput } from "./SpaCreateInput";
import { Spa } from "./Spa";
import { SpaFindManyArgs } from "./SpaFindManyArgs";
import { SpaWhereUniqueInput } from "./SpaWhereUniqueInput";
import { SpaUpdateInput } from "./SpaUpdateInput";

export class SpaControllerBase {
  constructor(protected readonly service: SpaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Spa })
  async createSpa(@common.Body() data: SpaCreateInput): Promise<Spa> {
    return await this.service.createSpa({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Spa] })
  @ApiNestedQuery(SpaFindManyArgs)
  async spas(@common.Req() request: Request): Promise<Spa[]> {
    const args = plainToClass(SpaFindManyArgs, request.query);
    return this.service.spas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Spa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async spa(@common.Param() params: SpaWhereUniqueInput): Promise<Spa | null> {
    const result = await this.service.spa({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Spa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpa(
    @common.Param() params: SpaWhereUniqueInput,
    @common.Body() data: SpaUpdateInput
  ): Promise<Spa | null> {
    try {
      return await this.service.updateSpa({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Spa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpa(
    @common.Param() params: SpaWhereUniqueInput
  ): Promise<Spa | null> {
    try {
      return await this.service.deleteSpa({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
