/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CheckOutService } from "../checkOut.service";
import { CheckOutCreateInput } from "./CheckOutCreateInput";
import { CheckOut } from "./CheckOut";
import { CheckOutFindManyArgs } from "./CheckOutFindManyArgs";
import { CheckOutWhereUniqueInput } from "./CheckOutWhereUniqueInput";
import { CheckOutUpdateInput } from "./CheckOutUpdateInput";

export class CheckOutControllerBase {
  constructor(protected readonly service: CheckOutService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CheckOut })
  async createCheckOut(
    @common.Body() data: CheckOutCreateInput
  ): Promise<CheckOut> {
    return await this.service.createCheckOut({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CheckOut] })
  @ApiNestedQuery(CheckOutFindManyArgs)
  async checkOuts(@common.Req() request: Request): Promise<CheckOut[]> {
    const args = plainToClass(CheckOutFindManyArgs, request.query);
    return this.service.checkOuts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CheckOut })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async checkOut(
    @common.Param() params: CheckOutWhereUniqueInput
  ): Promise<CheckOut | null> {
    const result = await this.service.checkOut({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CheckOut })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCheckOut(
    @common.Param() params: CheckOutWhereUniqueInput,
    @common.Body() data: CheckOutUpdateInput
  ): Promise<CheckOut | null> {
    try {
      return await this.service.updateCheckOut({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CheckOut })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCheckOut(
    @common.Param() params: CheckOutWhereUniqueInput
  ): Promise<CheckOut | null> {
    try {
      return await this.service.deleteCheckOut({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
