/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StoreCredit as PrismaStoreCredit } from "@prisma/client";

export class StoreCreditServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoreCreditCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storeCredit.count(args);
  }

  async storeCredits<T extends Prisma.StoreCreditFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreditFindManyArgs>
  ): Promise<PrismaStoreCredit[]> {
    return this.prisma.storeCredit.findMany<Prisma.StoreCreditFindManyArgs>(
      args
    );
  }
  async storeCredit<T extends Prisma.StoreCreditFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreditFindUniqueArgs>
  ): Promise<PrismaStoreCredit | null> {
    return this.prisma.storeCredit.findUnique(args);
  }
  async createStoreCredit<T extends Prisma.StoreCreditCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreditCreateArgs>
  ): Promise<PrismaStoreCredit> {
    return this.prisma.storeCredit.create<T>(args);
  }
  async updateStoreCredit<T extends Prisma.StoreCreditUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreditUpdateArgs>
  ): Promise<PrismaStoreCredit> {
    return this.prisma.storeCredit.update<T>(args);
  }
  async deleteStoreCredit<T extends Prisma.StoreCreditDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreditDeleteArgs>
  ): Promise<PrismaStoreCredit> {
    return this.prisma.storeCredit.delete(args);
  }
}
