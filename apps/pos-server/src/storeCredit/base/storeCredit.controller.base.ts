/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoreCreditService } from "../storeCredit.service";
import { StoreCreditCreateInput } from "./StoreCreditCreateInput";
import { StoreCredit } from "./StoreCredit";
import { StoreCreditFindManyArgs } from "./StoreCreditFindManyArgs";
import { StoreCreditWhereUniqueInput } from "./StoreCreditWhereUniqueInput";
import { StoreCreditUpdateInput } from "./StoreCreditUpdateInput";

export class StoreCreditControllerBase {
  constructor(protected readonly service: StoreCreditService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoreCredit })
  async createStoreCredit(
    @common.Body() data: StoreCreditCreateInput
  ): Promise<StoreCredit> {
    return await this.service.createStoreCredit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoreCredit] })
  @ApiNestedQuery(StoreCreditFindManyArgs)
  async storeCredits(@common.Req() request: Request): Promise<StoreCredit[]> {
    const args = plainToClass(StoreCreditFindManyArgs, request.query);
    return this.service.storeCredits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoreCredit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storeCredit(
    @common.Param() params: StoreCreditWhereUniqueInput
  ): Promise<StoreCredit | null> {
    const result = await this.service.storeCredit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoreCredit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoreCredit(
    @common.Param() params: StoreCreditWhereUniqueInput,
    @common.Body() data: StoreCreditUpdateInput
  ): Promise<StoreCredit | null> {
    try {
      return await this.service.updateStoreCredit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoreCredit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoreCredit(
    @common.Param() params: StoreCreditWhereUniqueInput
  ): Promise<StoreCredit | null> {
    try {
      return await this.service.deleteStoreCredit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
